: Any) -> bytes: ...
    def make_signer(self, salt: Optional[Union[Text, bytes]] = ...) -> Signer: ...
    def iter_unsigners(self, salt: Optional[Union[Text, bytes]] = ...) -> Generator[Any, None, None]: ...
    def dumps(self, obj: Any, salt: Optional[Union[Text, bytes]] = ...) -> Any: ...  # morally -> Union[str, bytes]
    def dump(self, obj: Any, f: IO[Any], salt: Optional[Union[Text, bytes]] = ...) -> None: ...
    def loads(self, s: Union[Text, bytes], salt: Optional[Union[Text, bytes]] = ...) -> Any: ...
    def load(self, f: IO[Any], salt: Optional[Union[Text, bytes]] = ...) -> Any: ...
    def loads_unsafe(self, s: Union[Text, bytes], salt: Optional[Union[Text, bytes]] = ...) -> Tuple[bool, Optional[Any]]: ...
    def load_unsafe(self, f: IO[Any], salt: Optional[Union[Text, bytes]] = ...) -> Tuple[bool, Optional[Any]]: ...

class TimedSerializer(Serializer):
    def loads(
        self,
        s: Union[Text, bytes],
        salt: Optional[Union[Text, bytes]] = ...,
        max_age: Optional[int] = ...,
        return_timestamp: bool = ...,
    ) -> Any: ...  # morally -> Union[Any, Tuple[Any, datetime]]
    def loads_unsafe(
        self, s: Union[Text, bytes], salt: Optional[Union[Text, bytes]] = ..., max_age: Optional[int] = ...
    ) -> Tuple[bool, Any]: ...

class JSONWebSignatureSerializer(Serializer):
    jws_algorithms: MutableMapping[Text, SigningAlgorithm] = ...
    default_algorithm: Text = ...
    default_serializer: Any = ...

    algorithm_name: Text
    algorithm: SigningAlgorithm
    def __init__(
        self,
        secret_key: Union[Text, bytes],
        salt: Optional[Union[Text, bytes]] = ...,
        serializer: Optional[_serializer] = ...,
        signer: Optional[Callable[..., Signer]] = ...,
        signer_kwargs: Optional[MutableMapping[str, Any]] = ...,
        algorithm_name: Optional[Text] = ...,
    ) -> None: ...
    def load_payload(
        self, payload: Union[Text, bytes], serializer: Optional[_serializer] = ..., return_header: bool = ...
    ) -> Any: ...  # morally -> Union[Any, Tuple[Any, Mutable
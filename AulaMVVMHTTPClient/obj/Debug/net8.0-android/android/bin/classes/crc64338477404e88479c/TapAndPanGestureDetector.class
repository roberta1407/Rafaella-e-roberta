uteNS

  $avalue = $node->getAttributeNS( $nsURI, $aname );

Retrieves an attribute value by local name and namespace URI.


=item getAttributeNode

  $attrnode = $node->getAttributeNode( $aname );

Retrieve an attribute node by name. If no attribute with a given name exists, C<<<<<< undef >>>>>> is returned.


=item getAttributeNodeNS

  $attrnode = $node->getAttributeNodeNS( $namespaceURI, $aname );

Retrieves an attribute node by local name and namespace URI. If no attribute
with a given localname and namespace exists, C<<<<<< undef >>>>>> is returned.


=item removeAttribute

  $node->removeAttribute( $aname );

The method removes the attribute C<<<<<< $aname >>>>>> from the node's attribute list, if the attribute can be found.


=item removeAttributeNS

  $node->removeAttributeNS( $nsURI, $aname );

Namespace version of C<<<<<< removeAttribute >>>>>>


=item hasAttribute

  $boolean = $node->hasAttribute( $aname );

This function tests if the named attribute is set for the node. If the
attribute is specified, TRUE (1) will be returned, otherwise the return value
is FALSE (0).


=item hasAttributeNS

  $boolean = $node->hasAttributeNS( $nsURI, $aname );

namespace version of C<<<<<< hasAttribute >>>>>>


=item getChildrenByTagName

  @nodes = $node->getChildrenByTagName($tagname);

The function gives direct access to all child elements of the current node with
a given tagname, where tagname is a qualified name, that is, in case of
namespace usage it may consist of a prefix and local name. This function makes
things a lot easier if one needs to handle big data sets. A special tagname '*'
can be used to match any name.

If this function is called in SCALAR context, it returns the number of elements
found.


=item getChildrenByTagNameNS

  @nodes = $node->getChildrenByTagNameNS($nsURI,$tagname);

Namespace version of C<<<<<< getChildrenByTagName >>>>>>. A special nsURI '*' matches any namespace URI, in which case the function
behaves just like C<<<<<< getChildrenByLocalName >>>>>>.

If this function is called in SCALAR context, it returns the number of elements
found.


=item getChildrenByLocalName

  @nodes = $node->getChildrenByLocalName($localname);

The function gives direct access to all child elements of the current node with
a given local name. It makes things a lot easier if one needs to handle big
data sets. A special C<<<<<< localname >>>>>> '*' can be used to match any local name.

If this function is called in SCALAR context, it returns the number of elements
found.


=item getElementsByTagName

  @nodes = $node->getElementsByTagName($tagname);

This function is part of the spec. It fetches all descendants of a node with a
given tagname, where C<<<<<< tagname >>>>>> is a qualified name, that is, in case of namespace usage it may consist of a
prefix and local name. A special C<<<<<< tagname >>>>>> '*' can be used to match any tag name.

In SCALAR context this function returns an L<<<<<< XML::LibXML::NodeList >>>>>> object.


=item getElementsByTagNameNS

  @nodes = $node->getElementsByTagNameNS($nsURI,$localname);

Namespace version of C<<<<<< getElementsByTagName >>>>>> as found in the DOM spec. A special C<<<<<< localname >>>>>> '*' can be 